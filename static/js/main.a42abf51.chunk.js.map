{"version":3,"sources":["Clock.tsx","App.tsx","index.tsx"],"names":["Clock","name","useState","clockState","setClockState","timerId","useEffect","window","setInterval","date","Date","toLocaleTimeString","clearInterval","useMemo","console","info","className","App","clockName","setTimerName","hasClock","setClockOn","prevClockName","setPrevName","detectKeyDown","e","preventDefault","button","addEventListener","value","now","toString","slice","getRandomName","debug","ReactDOM","render","document","getElementById"],"mappings":"kMAOaA,EAAyB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACvC,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEIC,EAAU,EAgBd,OAdAC,qBAAU,WAOR,OANAD,EAAUE,OAAOC,aAAY,WAC3B,IAAMC,EAAO,IAAIC,KAEjBN,EAAcK,EAAKE,wBAClB,KAEI,kBAAMC,cAAcP,MAC1B,CAACF,IAEJU,mBAAQ,WACNC,QAAQC,KAAKZ,KACZ,CAACA,IAGF,sBAAKa,UAAU,QAAf,UACE,wBAAQA,UAAU,cAAlB,SACGf,IAGF,YAED,sBAAMe,UAAU,cAAhB,SACGb,Q,MCxBF,IAAMc,EAAgB,WAC3B,MAAkCf,mBAAS,WAA3C,mBAAOgB,EAAP,KAAkBC,EAAlB,KACA,EAA+BjB,oBAAS,GAAxC,mBAAOkB,EAAP,KAAiBC,EAAjB,KACA,EAAqCnB,mBAAS,WAA9C,mBAAOoB,EAAP,KAAsBC,EAAtB,KAEIlB,EAAU,EAERmB,EAAgB,SAACC,GACrBA,EAAEC,iBAEe,IAAbD,EAAEE,OACJN,GAAW,GAEXA,GAAW,IAwBf,OApBAf,qBAAU,WACRC,OAAOqB,iBAAiB,QAASJ,GACjCjB,OAAOqB,iBAAiB,cAAeJ,MAGzClB,qBAAU,WAMR,OALAD,EAAUE,OAAOC,aAAY,WAC3Be,EAAYL,GACZC,EA/BN,WACE,IAAMU,EAAQnB,KAAKoB,MAAMC,WAAWC,OAAO,GAE3C,MAAM,SAAN,OAAgBH,GA4BCI,MACZ,MAEI,kBAAMrB,cAAcP,MAC1B,CAACa,IAEJL,mBAAQ,WACFO,GACFN,QAAQoB,MAAR,uBAA8BZ,EAA9B,eAAkDJ,MAEnD,CAACA,IAGF,sBAAKF,UAAU,MAAf,UACE,6CACCI,GAAY,cAAC,EAAD,CAAOnB,KAAMiB,QChDhCiB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a42abf51.chunk.js","sourcesContent":["/* eslint-disable no-console */\nimport React, { useEffect, useState, useMemo } from 'react';\n\ntype Props = {\n  name: string;\n};\n\nexport const Clock: React.FC<Props> = ({ name }) => {\n  const [clockState, setClockState] = useState('');\n\n  let timerId = 0;\n\n  useEffect(() => {\n    timerId = window.setInterval(() => {\n      const date = new Date();\n\n      setClockState(date.toLocaleTimeString());\n    }, 1000);\n\n    return () => clearInterval(timerId);\n  }, [clockState]);\n\n  useMemo(() => {\n    console.info(clockState);\n  }, [clockState]);\n\n  return (\n    <div className=\"Clock\">\n      <strong className=\"Clock__name\">\n        {name}\n      </strong>\n\n      {' time is '}\n\n      <span className=\"Clock__time\">\n        {clockState}\n      </span>\n    </div>\n  );\n};\n","/* eslint-disable no-console */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { Clock } from './Clock';\nimport './App.scss';\n\nfunction getRandomName(): string {\n  const value = Date.now().toString().slice(-4);\n\n  return `Clock-${value}`;\n}\n\nexport const App: React.FC = () => {\n  const [clockName, setTimerName] = useState('Clock-0');\n  const [hasClock, setClockOn] = useState(true);\n  const [prevClockName, setPrevName] = useState('Clock-0');\n\n  let timerId = 0;\n\n  const detectKeyDown = (e: MouseEvent) => {\n    e.preventDefault();\n\n    if (e.button === 2) {\n      setClockOn(false);\n    } else {\n      setClockOn(true);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('click', detectKeyDown);\n    window.addEventListener('contextmenu', detectKeyDown);\n  });\n\n  useEffect(() => {\n    timerId = window.setInterval(() => {\n      setPrevName(clockName);\n      setTimerName(getRandomName());\n    }, 3300);\n\n    return () => clearInterval(timerId);\n  }, [clockName]);\n\n  useMemo(() => {\n    if (hasClock) {\n      console.debug(`Renamed from ${prevClockName} to ${clockName}`);\n    }\n  }, [clockName]);\n\n  return (\n    <div className=\"App\">\n      <h1>React clock</h1>\n      {hasClock && <Clock name={clockName} />}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}